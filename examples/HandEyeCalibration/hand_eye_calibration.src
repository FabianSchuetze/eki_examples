&ACCESS RVP
&REL 49
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM DISKPATH = KRC:\R1\Program
DEF hand_eye_calibration( )
DECL CHAR serviceName[40]
DECL RETURNCODE_T RETURN_CODE
DECL EKI_Status RET
DECL CHAR PRINT_MSG[80]
DECL KrlMsgPar_T par[3]
DECL FRAME AprilPose
DECL FRAME CURRENTROBOTPOSITION

;FOLD INI;%{PE}
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
;ENDFOLD (INI)

INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
INTERRUPT ON 89

;FOLD SPTP HOME Vel=100 % DEFAULT;%{PE}%MKUKATPBASIS,%CSPLINE,%VSPTP_SB,%P 1:SPTP_SB, 2:HOME, 3:, 5:100, 7:DEFAULT
SPTP XHOME WITH $VEL_AXIS[1]= SVEL_JOINT( 100), $TOOL= STOOL2( FHOME), $BASE= SBASE( FHOME.BASE_NO),$IPO_MODE= SIPO_MODE( FHOME.IPO_FRAME), $LOAD= SLOAD( FHOME.TOOL_NO), $ACC_AXIS[1]= SACC_JOINT( PDEFAULT), $GEAR_JERK[1]= SGEAR_JERK( PDEFAULT)
;ENDFOLD

$FLAG[1] = FALSE

RC_SETMSG("Start HEC!")

RC_INIT("rc_hand_eye_calibration-reset_calibration")
RC_INIT("rc_hand_eye_calibration-parameters")
RC_INIT("rc_hand_eye_calibration-set_pose")
RC_INIT("rc_hand_eye_calibration-calibrate")
RC_INIT("rc_hand_eye_calibration-save_calibration")

RC_HEC_RESETCALIBRATION()

RC_HEC_SETPARAMETERS(0.3855, 0.2658, true)

RC_HEC_SETCURRENTPOSE(1)

;FOLD SPTP P1 Vel=100 % PDAT1 Tool[2]:gripper Base[0] ;%{PE}
;FOLD Parameters ;%{h}
;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=P1; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=PDAT1; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
;ENDFOLD
SPTP XP1 WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FP1), $BASE = SBASE(FP1.BASE_NO), $IPO_MODE = SIPO_MODE(FP1.IPO_FRAME), $LOAD = SLOAD(FP1.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PPDAT1), $APO = SAPO_PTP(PPDAT1), $GEAR_JERK[1] = SGEAR_JERK(PPDAT1), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
;ENDFOLD

RC_HEC_SETCURRENTPOSE(2)


;FOLD SPTP P2 Vel=100 % PDAT2 Tool[2]:gripper Base[0] ;%{PE}
;FOLD Parameters ;%{h}
;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=P2; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=PDAT2; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
;ENDFOLD
SPTP XP2 WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FP2), $BASE = SBASE(FP2.BASE_NO), $IPO_MODE = SIPO_MODE(FP2.IPO_FRAME), $LOAD = SLOAD(FP2.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PPDAT2), $APO = SAPO_PTP(PPDAT2), $GEAR_JERK[1] = SGEAR_JERK(PPDAT2), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
;ENDFOLD

RC_HEC_SETCURRENTPOSE(3)


;FOLD SPTP P3 Vel=100 % PDAT3 Tool[2]:gripper Base[0] ;%{PE}
;FOLD Parameters ;%{h}
;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=P3; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=PDAT3; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
;ENDFOLD
SPTP XP3 WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FP3), $BASE = SBASE(FP3.BASE_NO), $IPO_MODE = SIPO_MODE(FP3.IPO_FRAME), $LOAD = SLOAD(FP3.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PPDAT3), $APO = SAPO_PTP(PPDAT3), $GEAR_JERK[1] = SGEAR_JERK(PPDAT3), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
;ENDFOLD

RC_HEC_SETCURRENTPOSE(4)

RC_HEC_CALIBRATEANDSAVE()

RC_SETMSG("Finish")

;FOLD SPTP HOME Vel=100 % DEFAULT ;%{PE}
;FOLD Parameters ;%{h}
;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
;ENDFOLD
SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
;ENDFOLD

END


;FOLD RC_SETMSG
DEF RC_SETMSG(msg[]:IN)
  DECL CHAR msg[]
  DECL KrlMsgPar_T params[3]
  RC_SETMSG_PARAM(msg[], params[])
END
;ENDFOLD (RC_SETMSG)

;FOLD RC_SETMSG_PARAM
DEF RC_SETMSG_PARAM(msg[]:IN, params:OUT)
  DECL CHAR msg[]
  DECL KrlMsgPar_T params[]

  DECL KrlMsg_T name
  DECL KrlMsgOpt_T options
  DECL INT Handle
  DECL EKrlMsgType Type

  name={modul[] "RC", nr 1, msg_txt[] " "}
  name.msg_txt[] = msg[]
  Type=#notify
  Handle=Set_KrlMsg(Type, name, params[], options)
END
;ENDFOLD (RC_SETMSG_PARAM)

;FOLD RC_INIT
DEF RC_INIT(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  RET=EKI_INIT(configFileName[])
END
;ENDFOLD (RC_INIT)

;FOLD RC_OPENCONNECTION
DEF RC_OPENCONNECTION(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  RET=EKI_Open(configFileName[])
  EKI_CHECK(RET,#Quit)
END
;ENDFOLD (RC_OPENCONNECTION)

;FOLD RC_CLOSECONNECTION
DEF RC_CLOSECONNECTION(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  WAIT SEC 0
  RET=EKI_Close(configFileName[])
END
;ENDFOLD (RC_CLOSECONNECTION)

;FOLD RC_WAITFORRESULT
DEF RC_WAITFORRESULT(WaitFlag:IN)
  DECL INT WaitFlag

  WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]

  ;Eki-connection has been closed 
  IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
    RC_SETMSG("EKI connection lost")
  ENDIF

  $FLAG[WaitFlag] = FALSE
END
;ENDFOLD (RC_WAITFORRESULT)

;FOLD RC_NOTIFYRECEIVED
DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
  DECL INT WAITFLAG
  DECL INT EOFRESULFLAG
  $FLAG[EOFRESULFLAG]=FALSE
  $FLAG[WAITFLAG]=TRUE
END
;ENDFOLD (RC_NOTIFYRECEIVED)

;FOLD RC_HEC_RESETCALIBRATION
DEF RC_HEC_RESETCALIBRATION()
  DECL CHAR serviceName[50]
  DECL RETURNCODE_T RESULT
  DECL EKI_STATUS RET

  serviceName[] = "rc_hand_eye_calibration-reset_calibration"
  
  RC_OPENCONNECTION(serviceName[])

  RET = EKI_Send(serviceName[], "req")
  RC_WAITFORRESULT(1)

  RESULT={VALUE 0, MSG[] "0"}

  RET = EKI_GetInt(serviceName[], "res/return_code/@value", RESULT.VALUE)
  RET = EKI_GetString(serviceName[], "res/return_code/@message", RESULT.MSG[])

  IF(RESULT.VALUE < 0) THEN
    RC_SETMSG("Execution failed")
    RC_SETMSG(RESULT.MSG[])
  ENDIF
  RC_CLOSECONNECTION(serviceName[])
END
;ENDFOLD(RC_HEC_RESETCALIBRATION)

;FOLD RC_HEC_SETPARAMETERS
DEF RC_HEC_SETPARAMETERS(gridWidth:IN, gridHeight:IN, robotMounted:IN)
  DECL REAL gridHeight
  DECL REAL gridWidth
  DECL BOOL robotMounted
  DECL CHAR serviceName[40]
  DECL EKI_STATUS RET

  serviceName[] = "rc_hand_eye_calibration-parameters"

  RC_OPENCONNECTION(serviceName[])

  RET = EKI_SetReal(serviceName[], "req/parameters/grid_height/@value", gridHeight)
  RET = EKI_SetReal(serviceName[], "req/parameters/grid_width/@value", gridWidth)
  RET = EKI_SetBool(serviceName[], "req/parameters/robot_mounted/@value", robotMounted)

  RET = EKI_Send(serviceName[], "req")
  RC_WAITFORRESULT(1)
  RC_CLOSECONNECTION(serviceName[])

END
;ENDFOLD(RC_HEC_SETPARAMETERS)

;FOLD RC_HEC_SETCURRENTPOSE
DEF RC_HEC_SETCURRENTPOSE(slot:IN)
  DECL INT slot
  DECL FRAME pose
  DECL CHAR serviceName[32]
  DECL RETURNCODE_T RESULT
  DECL EKI_STATUS RET
  DECL BOOL success

  serviceName[] = "rc_hand_eye_calibration-set_pose"
  
  RC_OPENCONNECTION(serviceName[])

  pose.X = $POS_ACT.X
  pose.Y = $POS_ACT.Y
  pose.Z = $POS_ACT.Z
  pose.A = $POS_ACT.A
  pose.B = $POS_ACT.B
  pose.C = $POS_ACT.C

  RET = EKI_SetFrame(serviceName[], "req/args/pose", pose)
  RET = EKI_SetInt(serviceName[], "req/args/slot", slot)

  RET = EKI_Send(serviceName[], "req")
  RC_WAITFORRESULT(1)

  RESULT={VALUE 0, MSG[] "0"}
  success=FALSE

  RET = EKI_GetBool(serviceName[], "res/success", success)
  RET = EKI_GetInt(serviceName[], "res/return_code/@value", RESULT.VALUE)
  RET = EKI_GetString(serviceName[], "res/return_code/@message", RESULT.MSG[])

  IF(success) THEN
    RC_CLOSECONNECTION(serviceName[])
  ELSE
    RC_SETMSG("Execution failed")
    RC_SETMSG(RESULT.MSG[])
  ENDIF

END
;ENDFOLD(RC_HEC_SETCURRENTPOSE)

;FOLD RC_HEC_CALIBRATEANDSAVE
DEF RC_HEC_CALIBRATEANDSAVE()
  DECL CHAR serviceName[40]
  DECL CHAR resMessage[160]
  DECL BOOL success
  DECL REAL calibrationError
  DECL EKI_STATUS RET
  DECL RETURNCODE_T RESULT
  DECL KrlMsgPar_T par[3]

  serviceName[] = "rc_hand_eye_calibration-calibrate"

  RC_OPENCONNECTION(serviceName[])

  RC_OPENCONNECTION("rc_hand_eye_calibration-save_calibration")
  
  RET = EKI_Send(serviceName[], "req")
  RC_WAITFORRESULT(1)

  RESULT={VALUE 0, MSG[] "0"}
 
  success = FALSE
  resMessage[] = "-"
  calibrationError = 99.9

  RET = EKI_GetBool(serviceName[], "res/success", success)
  RET = EKI_GetString(serviceName[], "res/message", resMessage[])
  RET = EKI_GetReal(serviceName[], "res/error", calibrationError)

  IF(success) THEN
    RC_SETMSG("Calibration successful.")
    
    par[1] = {par_type #value, par_real 0}
    par[1].par_real = calibrationError
    RC_SETMSG_PARAM("Calibration error: %1", par[])

    serviceName[] = "rc_hand_eye_calibration-save_calibration"

    RET = EKI_Send(serviceName[], "req")
    RC_WAITFORRESULT(1)

    RESULT={VALUE 0, MSG[] "0"}

    RET = EKI_GetInt(serviceName[], "res/return_code/@value", RESULT.VALUE)
    RET = EKI_GetString(serviceName[], "res/return_code/@message", RESULT.MSG[])
  
    IF(RESULT.VALUE < 0) THEN
      RC_SETMSG("Execution failed")
      RC_SETMSG(RESULT.MSG[])

    ELSE
      RC_SETMSG("Calibration saved.")
    ENDIF

    RC_CLOSECONNECTION(serviceName[])
  ELSE
    RC_SETMSG("Calibration failed.")
    RC_SETMSG(resMessage[])
  ENDIF

END
;ENDFOLD(RC_HEC_CALIBRATEANDSAVE)


